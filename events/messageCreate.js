// events/messageCreate.js
const { Events, EmbedBuilder, Colors, ChannelType } = require('discord.js');
const ScheduledEvent = require('../models/ScheduledEvent'); // Assurez-vous que le chemin est correct
const moment = require('moment');

module.exports = {
    name: Events.MessageCreate, // Nom de l'√©v√©nement Discord √† √©couter
    async execute(message, client, config) { // 'config' est pass√© ici
        // Ignorer les messages du bot lui-m√™me
        if (message.author.bot) return;

        // Ne traiter que les messages en DM (Direct Messages)
        if (message.channel.type !== ChannelType.DM) return;

        const userId = message.author.id;
        const userResponse = message.content.toLowerCase().trim();

        // V√©rifier si cet utilisateur a une demande de participation en cours
        const eventId = ScheduledEvent.getParticipationRequest(userId);

        if (eventId) {
            // Si une demande est en cours, tenter de r√©cup√©rer l'√©v√©nement depuis la BDD
            const event = await ScheduledEvent.findById(eventId);

            if (!event) {
                // Si l'√©v√©nement n'existe plus en BDD (ex: supprim√© manuellement)
                ScheduledEvent.removeParticipationRequest(userId); // Nettoyer la requ√™te en m√©moire
                return message.channel.send("D√©sol√©, l'√©v√©nement pour lequel vous tentiez de confirmer n'existe plus ou n'est plus valide.");
            }

            if (userResponse === 'oui') {
                // L'utilisateur confirme sa participation
                const updatedEvent = await ScheduledEvent.addParticipant(event._id, userId, message.author.tag); // Ajouter le participant
                ScheduledEvent.removeParticipationRequest(userId); // Supprimer la requ√™te apr√®s confirmation

                const successEmbed = new EmbedBuilder()
                    .setColor(Colors.Green)
                    .setTitle("‚úÖ Participation Confirm√©e !")
                    .setDescription(`Votre participation √† l'√©v√©nement **${event.name}** a √©t√© enregistr√©e.
                    Nous vous attendons le **${moment(event.scheduled_for).format('DD/MM/YYYY √† HH:mm')}** !`);

                // Ajout du lien vers le salon vocal si configur√©
                if (event.voice_channel_id) {
                    // Trouver la guilde √† partir du client pour obtenir son ID
                    // Cela suppose que le bot est dans la guilde o√π le salon vocal existe
                    const guild = client.guilds.cache.find(g => g.channels.cache.has(event.voice_channel_id));
                    if (guild) {
                        successEmbed.addFields({ name: "Salon Vocal", value: `[Cliquez ici pour rejoindre](https://discord.com/channels/${guild.id}/${event.voice_channel_id})`, inline: false });
                    }
                }

                await message.channel.send({ embeds: [successEmbed] });

                // Optionnel: Informer le staff ou un salon de logs que quelqu'un a particip√©
                // const logsChannel = client.channels.cache.get(config.RP_LOGS_CHANNEL_ID); // Supposons un ID de salon de logs dans vos secrets
                // if (logsChannel && logsChannel.isTextBased()) {
                //     logsChannel.send(`üì¢ ${message.author.tag} a confirm√© sa participation √† l'√©v√©nement "${event.name}".`);
                // }

            } else if (userResponse === 'non') {
                // L'utilisateur annule sa participation ou refuse
                ScheduledEvent.removeParticipationRequest(userId); // Supprimer la requ√™te
                await message.channel.send({ content: "Votre demande de participation a √©t√© annul√©e. Vous n'√™tes pas inscrit(e) √† cet √©v√©nement." });
            } else {
                // R√©ponse invalide
                await message.channel.send({ content: "R√©ponse invalide. Veuillez r√©pondre **'oui'** pour confirmer ou **'non'** pour annuler votre participation." });
            }
        }
    },
};